namespace GameEvent;

enum Type : byte
{
// GENERAL PART (can be sent/received in any server state)
CL_PING,
SRV_PING,

// PREGAMING PART (only pregaming state)
CL_CONNECT, // user connects {uid, name}
SRV_ACCEPT_CONNECT, // accepts
SRV_REFUSE_CONNECT, // refuses
SRV_PLAYER_CONNECTED, // {uid, name} of a new player (if connection is accepted
// is sent to all players
CL_PLAYER_READY, // when client hit 'ready' button
SRV_GEN_MAP, // lobby formed, start generation
CL_GEN_MAP_OK, // player is ready
SRV_GAME_START, // game begins

// IN-GAME (verifiable)
CL_MOVEMENT,
SRV_MOVEMENT,

CL_TAKE_EQUIP,
SRV_TAKE_EQUIP,

CL_ATTACK_PLAYER,
SRV_ATTACK_PLAYER,

CL_ATTACK_MONSTER,
SRV_ATTACK_MONSTER,

CL_CHECK_WIN,
SRV_GAME_END,

// IN-GAME (server only actions)
SRV_MONSTER_MOVE,
SRV_SPAWN_PLAYER,
SRV_SPAWN_MONSTER,
SRV_SPAWN_ITEM,
SRV_SPAWN_CONSTRUCTION,
}

enum ConnectionStatus : byte
{
ACCEPTED,
REFUSED
}

table CLConnection
{
player_uid:uint;
nickname:string;
}

table SVConnectionStatus
{
player_uid:uint;
status:ConnectionStatus;
}

table SVPlayerConnected
{
player_uid:uint;
nickname:string;
}

table SVGenerateMap
{
map_w:ushort;
room_w:ushort;
seed:uint;
}

table CLMapGenerated
{
player_uid:uint;
}

table SVGameStart
{
}

// INGAME
table CLActionMove
{
player_uid:uint;
x:ushort;
y:ushort;
}

table SVActionMove
{
player_uid:uint;
x:ushort;
y:ushort;
}

enum ActionItemType : byte
{
TAKE,
DROP,
USE
}

table CLActionItem
{
player_uid:uint;
item_uid:ushort;
act_type:ActionItemType;
}

table SVActionItem
{
player_uid:uint;
item_uid:ushort;
act_type:ActionItemType;
}

enum ActionSwampStatus : byte
{
STARTED,
ESCAPED,
DIED
}

table CLActionSwamp
{
player_uid:uint;
status:ActionSwampStatus;
}

table SVActionSwamp
{
player_uid:uint;
status:ActionSwampStatus;
}

table SVSpawnPlayer
{
player_uid:uint;
x:ushort;
y:ushort;
}

table SVRespawnPlayer
{
player_uid:uint;
x:ushort;
y:ushort;
}

enum ItemType : byte
{
KEY,
SWORD
}

table SVSpawnItem
{
item_uid:ushort;
item_type:ItemType;
x:ushort;
y:ushort;
}

enum ConstrType : byte
{
DOOR,
GRAVEYARD,
SWAMP
}

table SVSpawnConstr
{
constr_uid:ushort;
constr_type:ConstrType;
x:ushort;
y:ushort;
}

table SVGameEnd
{
player_uid:uint;
}

union Events
{
CLConnection,
SVConnectionStatus,
SVPlayerConnected,
SVGenerateMap,
CLMapGenerated,
SVGameStart,

CLActionMove,
SVActionMove,

CLActionItem,
SVActionItem,

CLActionSwamp,
SVActionSwamp,

SVSpawnPlayer,
SVRespawnPlayer,
SVSpawnItem,
SVSpawnConstr,
SVGameEnd
}

table Event
{
event:Events;
}

root_type Event;
