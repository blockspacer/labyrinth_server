namespace GameEvent;

enum ConnectionStatus : byte
{
ACCEPTED,
REFUSED
}

table CLConnection
{
player_uid:uint;
nickname:string;
}

enum HeroType : byte
{
AIR_ELEMENTALIST,
WATER_ELEMENTALIST,
FIRE_ELEMENTALIST,
EARTH_ELEMENTALIST,
UNDEFINED
}

table SVConnectionStatus
{
player_uid:uint;
status:ConnectionStatus;
}

table SVPlayerConnected
{
player_uid:uint;
nickname:string;
}

table SVHeroPickStage
{
}

table CLHeroPick
{
player_uid:uint;
hero_type:HeroType;
}

table SVHeroPick
{
player_uid:uint;
hero_type:HeroType;
}

table CLReadyToStart
{
player_uid:uint;
}

table SVReadyToStart
{
player_uid:uint;
}

table SVGenerateMap
{
map_w:ushort;
room_w:ushort;
seed:uint;
}

table CLMapGenerated
{
player_uid:uint;
}

table SVGameStart
{
}

enum ActionMoveTarget : byte
{
PLAYER,
MONSTER
}

// INGAME
table CLActionMove
{
target_uid:uint;
target_type:ActionMoveTarget;
x:ushort;
y:ushort;
}

table SVActionMove
{
target_uid:uint;
target_type:ActionMoveTarget;
x:ushort;
y:ushort;
}

enum ActionItemType : byte
{
TAKE,
DROP,
USE
}

table CLActionItem
{
player_uid:uint;
item_uid:ushort;
act_type:ActionItemType;
}

table SVActionItem
{
player_uid:uint;
item_uid:ushort;
act_type:ActionItemType;
}

enum ActionSpellTarget : byte
{
TARGET_PLAYER,
TARGET_MONSTER,
TARGET_POINT
}

table CLActionSpell
{
player_uid:uint;
spell_id:ushort;
spell_target:ActionSpellTarget;
x_or_id:uint; // also represents TARGET_ID
y:uint;
}

table SVActionSpell
{
player_uid:uint;
spell_id:ushort;
spell_target:ActionSpellTarget;
point_x:uint; // also represents TARGET_ID
point_y:uint;
}

enum ActionSwampStatus : byte
{
STARTED,
ESCAPED,
DIED
}

table CLActionSwamp
{
player_uid:uint;
status:ActionSwampStatus;
}

table SVActionSwamp
{
player_uid:uint;
status:ActionSwampStatus;
}

enum ActionDuelType : byte
{
STARTED,
ATTACK,
ESCAPE,
KILL
}

enum ActionDuelTarget : byte
{
PLAYER,
MONSTER
}

table CLActionDuel
{
target1_uid:uint;
target1_type:ActionDuelTarget;
target2_uid:uint;
target2_type:ActionDuelTarget;
act_type:ActionDuelType;
damage:ushort;
}

table SVActionDuel
{
target1_uid:uint;
target1_type:ActionDuelTarget;
target2_uid:uint;
target2_type:ActionDuelTarget;
act_type:ActionDuelType;
damage:ushort;
}

enum ActionMapType : byte
{
CREATE_BLOCK,
DESTROY_BLOCK
}

table CLActionMap
{
player_uid:uint;
act_type:ActionMapType;
x:ushort;
y:ushort;
}

table SVActionMap
{
player_uid:uint;
act_type:ActionMapType;
x:ushort;
y:ushort;
}

table SVSpawnPlayer
{
player_uid:uint;
x:ushort;
y:ushort;
hp:ushort;
max_hp:ushort;
}

table SVSpawnMonster
{
monster_uid:ushort;
x:ushort;
y:ushort;
hp:ushort;
max_hp:ushort;
}

table SVRespawnPlayer
{
player_uid:uint;
x:ushort;
y:ushort;
hp:ushort;
max_hp:ushort;
}

enum ItemType : byte
{
KEY,
SWORD
}

table SVSpawnItem
{
item_uid:ushort;
item_type:ItemType;
x:ushort;
y:ushort;
}

enum ConstrType : byte
{
DOOR,
GRAVEYARD,
SWAMP
}

table SVSpawnConstr
{
constr_uid:ushort;
constr_type:ConstrType;
x:ushort;
y:ushort;
}

table SVGameEnd
{
player_uid:uint;
}

union Events
{
CLConnection,
SVConnectionStatus,
SVPlayerConnected,
SVHeroPickStage,
CLHeroPick,
SVHeroPick,
CLReadyToStart,
SVReadyToStart,
SVGenerateMap,
CLMapGenerated,
SVGameStart,

CLActionMove,
SVActionMove,

CLActionItem,
SVActionItem,

CLActionSwamp,
SVActionSwamp,

CLActionDuel,
SVActionDuel,

CLActionSpell,
SVActionSpell,

CLActionMap,
SVActionMap,

SVSpawnPlayer,
SVRespawnPlayer,
SVSpawnMonster,
SVSpawnItem,
SVSpawnConstr,
SVGameEnd
}

table Event
{
event:Events;
}

root_type Event;
